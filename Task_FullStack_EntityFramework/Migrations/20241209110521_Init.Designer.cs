// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Task_FullStack_EntityFramework.Entities;

#nullable disable

namespace Task_FullStack_EntityFramework.Migrations
{
    [DbContext(typeof(RequestContext))]
    [Migration("20241209110521_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Task_FullStack_EntityFramework.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RequestItemId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Task_FullStack_EntityFramework.Entities.RequestItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("datetime2(3)")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("requestItem");
                });

            modelBuilder.Entity("Task_FullStack_EntityFramework.Entities.RequestItemTag", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequestItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PublicationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("TagId", "RequestItemId");

                    b.HasIndex("RequestItemId");

                    b.ToTable("RequestItemTag");
                });

            modelBuilder.Entity("Task_FullStack_EntityFramework.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Task_FullStack_EntityFramework.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nick")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Task_FullStack_EntityFramework.Entities.Comment", b =>
                {
                    b.HasOne("Task_FullStack_EntityFramework.Entities.RequestItem", "RequestItem")
                        .WithMany("Comments")
                        .HasForeignKey("RequestItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestItem");
                });

            modelBuilder.Entity("Task_FullStack_EntityFramework.Entities.RequestItem", b =>
                {
                    b.HasOne("Task_FullStack_EntityFramework.Entities.User", "Author")
                        .WithMany("RequestItems")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Task_FullStack_EntityFramework.Entities.RequestItemTag", b =>
                {
                    b.HasOne("Task_FullStack_EntityFramework.Entities.RequestItem", "RequestItem")
                        .WithMany()
                        .HasForeignKey("RequestItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task_FullStack_EntityFramework.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestItem");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Task_FullStack_EntityFramework.Entities.RequestItem", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Task_FullStack_EntityFramework.Entities.User", b =>
                {
                    b.Navigation("RequestItems");
                });
#pragma warning restore 612, 618
        }
    }
}
